
From 6d1d90466b2b85a641a5dbda6a0bc72eebe7507b Mon Sep 17 00:00:00 2001
From: Tom Morrell <tmorrell@caltech.edu>
Date: Wed, 10 May 2023 20:36:54 +0000
Subject: [PATCH] fixtures: method to add/update entries

---
 invenio_rdm_records/cli.py                   | 19 ++++++++++++++++++
 invenio_rdm_records/fixtures/__init__.py     | 13 ++++++++++++
 invenio_rdm_records/fixtures/tasks.py        | 19 ++++++++++++++++--
 invenio_rdm_records/fixtures/vocabularies.py | 21 ++++++++++++++++----
 4 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/invenio_rdm_records/cli.py b/invenio_rdm_records/cli.py
index ed15a6942..ff3523835 100644
--- a/invenio_rdm_records/cli.py
+++ b/invenio_rdm_records/cli.py
@@ -280,6 +280,25 @@ def create_fixtures():
     click.secho("Created required fixtures!", fg="green")
 
 
+@rdm_records.command("add_to_fixture")
+@click.argument("fixture")
+@with_appcontext
+def add_to_fixture(fixture):
+    """Add or update new entries to existing fixture.
+
+    Takes a argument of a vocabulary
+    name (e.g. contributorsroles).
+
+    Example:
+    pipenv run invenio rdm-records add_to_fixture contributorsroles
+    """
+    click.secho("Adding or updating entries to fixtures...", fg="green")
+
+    FixturesEngine(system_identity).add_to(fixture)
+
+    click.secho("Sent all entry additions and updates to celery!", fg="green")
+
+
 @rdm_records.command("rebuild-index")
 @with_appcontext
 def rebuild_index():
diff --git a/invenio_rdm_records/fixtures/__init__.py b/invenio_rdm_records/fixtures/__init__.py
index b18d3c6c7..05b2759c7 100644
--- a/invenio_rdm_records/fixtures/__init__.py
+++ b/invenio_rdm_records/fixtures/__init__.py
@@ -62,5 +62,18 @@ def run(self):
             create_demo_record,
         ).load()
 
+    def add_to(self, fixture):
+        """Run the fixture loading."""
+        dir_ = Path(__file__).parent
+        app_data_folder = Path(current_app.instance_path) / "app_data"
+        data_folder = dir_ / "data"
+
+        PrioritizedVocabulariesFixtures(
+            self._identity,
+            app_data_folder=app_data_folder,
+            pkg_data_folder=data_folder,
+            filename="vocabularies.yaml",
+        ).load(reload=fixture)
+
 
 __all__ = ("FixturesEngine", "PrioritizedVocabulariesFixtures", "VocabulariesFixture")
diff --git a/invenio_rdm_records/fixtures/tasks.py b/invenio_rdm_records/fixtures/tasks.py
index d91637d0a..77724fd82 100644
--- a/invenio_rdm_records/fixtures/tasks.py
+++ b/invenio_rdm_records/fixtures/tasks.py
@@ -2,6 +2,7 @@
 #
 # Copyright (C) 2021-2022 CERN.
 # Copyright (C) 2021-2022 Northwestern University.
+# Copyright (C) 2021-2022 California Institute of Technology.
 #
 # Invenio-RDM-Records is free software; you can redistribute it and/or modify
 # it under the terms of the MIT License; see LICENSE file for more details.
@@ -22,9 +23,11 @@
 from invenio_communities.generators import CommunityRoleNeed
 from invenio_communities.members.errors import AlreadyMemberError
 from invenio_communities.proxies import current_communities
+from invenio_pidstore.errors import PersistentIdentifierError
 from invenio_records_resources.proxies import current_service_registry
 from invenio_requests import current_events_service, current_requests_service
 from invenio_requests.customizations import CommentEventType
+from invenio_vocabularies.records.api import Vocabulary
 
 from ..proxies import current_oaipmh_server_service, current_rdm_records_service
 from ..requests import CommunitySubmission
@@ -43,9 +46,21 @@ def get_authenticated_identity(user_id):
 
 @shared_task
 def create_vocabulary_record(service_str, data):
-    """Create a vocabulary record."""
+    """Create or update a vocabulary record."""
     service = current_service_registry.get(service_str)
-    service.create(system_identity, data)
+    if "type" in data:
+        # We only check non-datastream vocabularies for updates
+        try:
+            pid = (data["type"], data["id"])
+            # If the entry hasn't been added, this will fail
+            record = Vocabulary.pid.resolve(pid)
+            service.update(system_identity, pid, data=data)
+            current_app.logger.info(f"updated existing fixture with {data}")
+        except PersistentIdentifierError:
+            service.create(system_identity, data)
+            current_app.logger.info(f"added new fixture with {data}")
+    else:
+        service.create(system_identity, data)
 
 
 @shared_task
diff --git a/invenio_rdm_records/fixtures/vocabularies.py b/invenio_rdm_records/fixtures/vocabularies.py
index f2f20974a..cc7b64f6f 100644
--- a/invenio_rdm_records/fixtures/vocabularies.py
+++ b/invenio_rdm_records/fixtures/vocabularies.py
@@ -16,9 +16,11 @@
 
 import pkg_resources
 import yaml
+from flask import current_app
 from invenio_db import db
 from invenio_vocabularies.proxies import current_service
 from invenio_vocabularies.records.models import VocabularyScheme, VocabularyType
+from sqlalchemy.exc import IntegrityError
 from sqlalchemy.orm import load_only
 
 from .tasks import create_vocabulary_record
@@ -168,7 +170,7 @@ def _entry_points(self):
         """
         return list(pkg_resources.iter_entry_points("invenio_rdm_records.fixtures"))
 
-    def load(self):
+    def load(self, reload=None):
         """Load the fixtures.
 
         Loads in priority
@@ -186,7 +188,8 @@ def load(self):
             for v in VocabularyScheme.query.options(load_only("id", "parent_id")).all()
         ]
         self._loaded_vocabularies = set(v_type_ids + v_subtype_ids)
-
+        if reload:
+            self._loaded_vocabularies.remove(reload)
         # 1- Load from app_data_folder
         filepath = self._app_data_folder / self._filename
         # An instance doesn't necessarily have custom vocabularies
@@ -322,7 +325,12 @@ def pre_load(self, identity, ignore):
         """Actions taken before iteratively creating records."""
         if self._id not in ignore:
             pid_type = self._entry["pid-type"]
-            current_service.create_type(identity, self._id, pid_type)
+            try:
+                current_service.create_type(identity, self._id, pid_type)
+            except IntegrityError:
+                current_app.logger.info(
+                    f"skipping creation of {pid_type}, already existing"
+                )
 
     def iterate(self, ignore):
         """Iterate over dicts of file content."""
@@ -382,7 +390,12 @@ def pre_load(self, identity, ignore):
         for scheme in self.schemes():
             id_ = f"{self._id}.{scheme['id']}"
             if id_ not in ignore:
-                self.create_scheme(scheme)
+                try:
+                    self.create_scheme(scheme)
+                except IntegrityError:
+                    current_app.logger.info(
+                        f"skipping creation of {scheme}, already existing"
+                    )
 
     def iterate(self, ignore):
         """Iterate over dicts of file content."""
