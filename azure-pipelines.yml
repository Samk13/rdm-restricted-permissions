# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# all tags: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#build-variables-devops-services

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
- group: Invenio-v12
- name: TAG
  value: ""
- name: PYTHON_VERSION
  value: "3.9"
- name: NODE_VERSION
  value: "18"
- name: POSTGRES_VERSION
  value: "postgresql14"
- name: SEARCH_VERSION
  value: "opensearch2"
- name: DB_EXTRA_DEPS
  value: "postgresql"

stages:
- stage: RunTests
  jobs:
  - job: RunTests
    strategy:
      matrix:
        combination_1:
          pythonVersion: "$(PYTHON_VERSION)"
          nodeVersion: "$(NODE_VERSION)"
          dbService: "$(POSTGRES_VERSION)"
          searchService: "$(SEARCH_VERSION)"
          DB_EXTRAS: "$(DB_EXTRA_DEPS)"
    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev
      displayName: 'Install python-ldap dependencies'

    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: "$(pythonVersion)"

    - task: NodeTool@0
      inputs:
        versionSource: "spec"
        versionSpec: "$(nodeVersion)"

    - bash: |
        ./run-js-linter.sh -i
      displayName: 'install run eslint'

    - bash: |
        pip install pipenv
      displayName: "install pipenv"

    - bash: |
        pipenv install --dev --deploy --system
        pip install "./site[tests,$(searchService)]"
        echo "##[debug]pip installed dependencies:"
        pip freeze
        echo "##[debug]Docker version:"
        docker --version
        echo "##[debug]Docker compose version:"
        docker-compose --version
      displayName: 'Install python dependencies'

    - bash: |
        ./run-tests.sh
      workingDirectory: ./site
      displayName: 'Run KTH overrides tests'

- stage: BuildApp
  jobs:
  - job: BuildPushImage
    steps:
    - bash: |
        # Sanitize branch name to make it Docker-compatible
        BRANCH=$(echo $(Build.SourceBranchName) | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-zA-Z0-9_.-]/-/g')
        echo BRANCH = $BRANCH
        echo "##[debug]IMAGE_TAG --> ${BRANCH}-DATE$(date +'%y%m%d')-TIME$(date +'%H%M%S')-BUILD$(Build.BuildId)"
        # Set Tag variable 
        echo "##vso[task.setvariable variable=TAG]${BRANCH}-DATE$(date +'%y%m%d')-TIME$(date +'%H%M%S')-BUILD$(Build.BuildId)"
      displayName: 'Set TAG Variable'

    - task: Docker@2
      inputs:
        containerRegistry: '$(CONTAINER_REGISTRY)'
        repository: '$(REPOSITORY_NAME)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(TAG)'

